#!/bin/bash

#####################################################################
# ENVIRONMENT HANDLING / SETTINGS
#####################################################################

PORTDIR="/data/portage/tree/"
SQUASH_SOURCE="/data/portage/tree.squashfs"

TMPDIR="${TMPDIR:-/tmp}"

# Passed to rsync when syncing the tree
PORTAGE_RSYNC_EXTRA_OPTS="${PORTAGE_RSYNC_EXTRA_OPTS:-"--delete-excluded"}"

# A list of categories that shouldn't be synced and
# a shorthand for writing "--exclude=/$category" above
# e.g "gnustep-apps gnustep-base gnustep-libs"
EXCLUDE_CATEGORIES="${EXCLUDE_CATEGORIES:-""}"

# Mirror used when doing a standalone sync (no emerge available)
RSYNC_MIRROR="${RSYNC_MIRROR:-"rsync://rsync.gentoo.org/gentoo-portage/"}"

# Passed to standalone rsync method ONLY (same as what emerge passes)
RSYNC_OPTIONS="${RSYNC_OPTIONS:-"--recursive --links --safe-links --perms \
 --times --compress --force --whole-file --delete --stats --human-readable \
 --timeout=180 --exclude=/distfiles --exclude=/local --exclude=/packages"}"

# 1 = ask before running every command (do this the first time)
# 0 = just do it
TESTING=1

# Passed to mksquashfs
MKSQUASHFS_OPTS="${MKSQUASHFS_OPTS:-"-comp xz -b 1M -force-uid portage -force-gid portage"}"

#####################################################################
# VARIOUS HELPER FUNCTIONS
#####################################################################

die()
{
	printf "\n[the last exit code leading to this death was: %s ]\n" "$?"
	local retval="$1"
	shift 1
	printf "$@"
	exit "$retval"
}

# for testing purpuses
run() {
	if [[ $TESTING -eq 0 ]]; then
		printf "Running %s...\n" "$*"
	else
		printf "Run %s ? (y/n) " "$*"

		read a
		if [[ $a != y* ]]; then
			printf " Not running %s.\n" "$*"
			return;
		fi
	fi

	eval "$@"
	if [[ $? -ne 0 ]]; then
		printf "Command returned %s\n" "$?"
		read wait_
	fi
}

#####################################################################
# SCRIPT-SPECIFIC FUNCTIONS
#####################################################################

ptree_mount()
{
	if ! grep -q "$SQUASH_SOURCE" /proc/mounts; then
		run mount -o ro "$SQUASH_SOURCE" "$PORTDIR"
	fi
}

run_sync()
{
	local portdir="$1"

	local excludes="$PORTAGE_RSYNC_EXTRA_OPTS"
	for category in $EXCLUDE_CATEGORIES; do
		excludes="$excludes --exclude=/$category"
	done

	if command -v emerge > /dev/null; then
		printf "Syncing with emerge --sync ...\n"
		PORTDIR="$portdir" PORTAGE_RSYNC_EXTRA_OPTS="$excludes" emerge --sync --quiet
	else
		printf "Unable to find emerge, calling rsync directly ...\n"
		rsync $RSYNC_OPTIONS "$RSYNC_MIRROR" "$portdir"
	fi
}

update_aufs()
{
	printf "Using AUFS to update...\n"

	local tmp_rw_dir="$TMPDIR/ptree_rw"
	mkdir -p "$tmp_rw_dir"

	local tmp_merge_dir="$TMPDIR/ptree_merge"
	mkdir -p "$tmp_merge_dir"

	run mount -t aufs ptree_merge -o "br:$tmp_rw_dir:$PORTDIR" "$tmp_merge_dir"

	run_sync "$tmp_merge_dir"

	run mksquashfs "$tmp_merge_dir" "$SQUASH_SOURCE.new" $MKSQUASHFS_OPTS

	run umount "$tmp_merge_dir"
	run rmdir "$tmp_merge_dir"
	run umount "$PORTDIR"
	run rm -r "$tmp_rw_dir"

#	run umount "$PORTDIR"
	run mv "$SQUASH_SOURCE.new" "$SQUASH_SOURCE"
}

# TODO: check if there is enaugh space on tmpfs
# TODO: check if there is enaugh ram
update_copy()
{
	printf "Falling back to the old rsync way\n"

	local tmp_rw_dir="$TMPDIR/ptree_rw"
	# unsquashfs does the mkdir.

	unsquashfs -dest "$tmp_rw_dir" "$SQUASH_SOURCE" \
		|| die 2 "Unable to unpack old SquashFS image:\n  (%s -> %s)\n" "$SQUASH_SOURCE" "$tmp_rw_dir"
	# unsquashfs doesen't signal an error when -dest already exists, but it still doesen't extract.
	# @ https://github.com/plougher/squashfs-tools/issues/1

	run run_sync "$tmp_rw_dir"

	run umount "$PORTDIR" # old squashfs
	run mv "$SQUASH_SOURCE" /tmp/ # backup

	run mksquashfs "$tmp_rw_dir" "$SQUASH_SOURCE" $MKSQUASHFS_OPTS

	run rm -r "$tmp_rw_dir"
}

update()
{
	# be nice
	ionice -c 3 -p $$ > /dev/null
	renice -n 15 -p $$ > /dev/null

	# make sure the old squashfs image is mounted
	ptree_mount

	if grep -q aufs /proc/filesystems; then
		update_aufs
	else
		update_copy
	fi

	# mount the new one
	ptree_mount
}

usage()
{
	cat 1>&2 <<- EOF
		usage: $0 (mount/update)
		  mount:  mounts the image
		  update: updates the portage tree SquashFS image
	EOF
}

#####################################################################
# PRE-RUN CHECKS
#####################################################################

if ! grep -q squashfs /proc/filesystems; then
	die 2 "You don't have SquashFS support in /proc/filesystems\n"
fi

if ! mount | grep -q " $TMPDIR .* tmpfs "; then
	die $((16+2)) "Please ensure \$TMPDIR (%s) is a real tmpfs\n" "$TMPDIR"
fi

#####################################################################
# COMMAND-LINE PARSING
#####################################################################

# though inconsistently implemented ...
set -e

case "$1" in
	mount)
		ptree_mount
		;;
	update)
		update
		;;
	*)
		usage
		;;
esac
