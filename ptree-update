#!/bin/bash

ionice -c 3 -p $$
renice -n 15 -p $$

# change this
PORTDIR="/data/portage/tree/"
SQUASH_SOURCE="/data/portage/tree.squashfs"

TMPFS="/tmp"
TMPDIR="${TMPDIR:-/tmp}"
TMPFS_DEST="/tmp/portage_tree_merge"

# 1 = ask before running every command (do this the first time)
# 0 = just do it
TESTING=1

SQUASH_OPTS="-comp xz -b 1M -force-uid portage -force-gid portage"

# for testing purpuses
run() {
	if [[ $TESTING -eq 0 ]]; then
		printf "Running %s...\n" "$*"
	else
		printf "Run %s ? (y/n) " "$*"

		read a
		if [[ $a != y* ]]; then
			printf " Not running %s.\n" "$*"
			return;
		fi
	fi

	eval "$@"
	if [[ $? -ne 0 ]]; then
		printf "Command returned %s\n" "$?"
		read wait_
	fi
}

if ! $(grep -q squashfs /proc/filesystems); then
	printf "You don't have SquashFS support in /proc/filesystems\n"
	return 1;
fi

if ! $(mount | grep -q " $TMPFS .* tmpfs "); then
	printf "Please ensure %s is a real tmpfs\n" "$TMPFS"
	return 1;
fi

ptree_mount()
{
	if ! grep -q "$SQUASH_SOURCE" /proc/mounts; then
		run mount -o ro "$SQUASH_SOURCE" "$PORTDIR"
	fi
}

update_aufs()
{
	printf "Using AUFS to update...\n"

	local tmp_rw_dir="$TMPDIR/ptree_rw"
	mkdir -p "$tmp_rw_dir"

	local tmp_merge_dir="$TMPDIR/ptree_merge"
	mkdir -p "$tmp_merge_dir"

	run mount -t aufs ptree_merge -o "br:$tmp_rw_dir:$PORTDIR" "$tmp_merge_dir"
	
	run PORTDIR="$tmp_merge_dir" emerge --sync --quiet

	run mksquashfs "$tmp_merge_dir" "$SQUASH_SOURCE.new" $SQUASH_OPTS
	run umount "$tmp_merge_dir"
	run rmdir "$tmp_merge_dir"
	run umount "$PORTDIR"
	run rm -r "$tmp_rw_dir"

#	run umount "$PORTDIR"
	run mv "$SQUASH_SOURCE.new" "$SQUASH_SOURCE"
}

# TODO: check if there is enaugh space on tmpfs
# TODO: check if there is enaugh ram
update_copy()
{
	printf "Falling back to the old rsync way\n"

	run rsync -au $PORTDIR $TMPFS_DEST
	run mount --bind $TMPFS_DEST $PORTDIR
	
	run emerge --sync --quiet

	run umount $PORTDIR # bind mount
	run umount $PORTDIR # old squashfs
	run mv $SQUASH_SOURCE /tmp/ # backup
	run mksquashfs $TMPFS_DEST $SQUASH_SOURCE $SQUASH_OPTS
	run rm -r $TMPFS_DEST
}

update()
{
	# make sure the old squashfs image is mounted
	ptree_mount

	if grep -q aufs /proc/filesystems; then
		update_aufs
	else
		update_copy
	fi

	# mount the new one
	ptree_mount
}

usage()
{
	cat 1>&2 <<- EOF
		usage: $0 (mount/update)
		  mount:  mounts the image
		  update: updates the portage tree SquashFS image
	EOF
}

case "$1" in
	mount)
		ptree_mount
		;;
	update)
		update
		;;
	*)
		usage
		;;
esac
